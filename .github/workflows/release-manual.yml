name: Manual Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (only used if release_type is custom, e.g., 1.16.1)'
        required: false
        type: string
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Determine version
        id: version
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep "^version" sql-cli/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Determine new version based on input
          if [ "${{ github.event.inputs.release_type }}" = "custom" ]; then
            if [ -z "${{ github.event.inputs.custom_version }}" ]; then
              echo "Error: Custom version not provided"
              exit 1
            fi
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          elif [ "${{ github.event.inputs.release_type }}" = "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "${{ github.event.inputs.release_type }}" = "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in Cargo.toml
        run: |
          sed -i "s/^version = .*/version = \"${{ steps.version.outputs.new_version }}\"/" sql-cli/Cargo.toml
          
      - name: Build release binary
        working-directory: ./sql-cli
        run: |
          cargo build --release
          
      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          LAST_TAG=$(git tag --sort=-version:refname | head -n 1 || echo "")
          
          {
            echo "# SQL CLI v${VERSION}"
            echo ""
            echo "**Release Date:** $(date +'%B %d, %Y')"
            echo ""
            
            # Add custom notes if provided
            if [ -n "${{ github.event.inputs.release_notes }}" ]; then
              echo "## Release Notes"
              echo "${{ github.event.inputs.release_notes }}"
              echo ""
            fi
            
            echo "## Changes"
            echo ""
            
            # Get commits since last tag
            if [ -n "$LAST_TAG" ]; then
              # Features
              FEATURES=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" | grep -E "^feat:" | sed 's/^feat: /- /' || true)
              if [ -n "$FEATURES" ]; then
                echo "### 🚀 Features"
                echo "$FEATURES"
                echo ""
              fi
              
              # Fixes
              FIXES=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" | grep -E "^fix:" | sed 's/^fix: /- /' || true)
              if [ -n "$FIXES" ]; then
                echo "### 🐛 Bug Fixes"
                echo "$FIXES"
                echo ""
              fi
              
              # All changes
              echo "### 📝 All Changes"
              git log ${LAST_TAG}..HEAD --pretty=format:"- %s" | grep -v "^- chore: bump version"
            else
              echo "Initial release"
            fi
          } > RELEASE_NOTES.md
          
          # Save to output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add sql-cli/Cargo.toml
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: v${{ steps.version.outputs.new_version }}
          body: ${{ steps.notes.outputs.notes }}
          draft: false
          prerelease: false
          files: |
            sql-cli/target/release/sql-cli
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}