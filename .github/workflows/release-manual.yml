name: Manual Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (only used if release_type is custom, e.g., 1.16.1)'
        required: false
        type: string
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string
        default: ''

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_notes: ${{ steps.notes.outputs.notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep "^version" sql-cli/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Determine new version based on input
          if [ "${{ github.event.inputs.release_type }}" = "custom" ]; then
            if [ -z "${{ github.event.inputs.custom_version }}" ]; then
              echo "Error: Custom version not provided"
              exit 1
            fi
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          elif [ "${{ github.event.inputs.release_type }}" = "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "${{ github.event.inputs.release_type }}" = "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in Cargo.toml
        run: |
          sed -i "s/^version = .*/version = \"${{ steps.version.outputs.new_version }}\"/" sql-cli/Cargo.toml

      - name: Generate comprehensive release notes
        id: notes
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          LAST_TAG=$(git tag --sort=-version:refname | head -n 1 || echo "")
          
          # Get commit statistics
          if [ -n "$LAST_TAG" ]; then
            COMMIT_COUNT=$(git rev-list --count ${LAST_TAG}..HEAD 2>/dev/null || echo "0")
            FILES_CHANGED=$(git diff --name-only ${LAST_TAG}..HEAD 2>/dev/null | wc -l || echo "0")
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%H|%s|%b" 2>/dev/null || echo "")
          else
            COMMIT_COUNT=$(git rev-list --count HEAD 2>/dev/null || echo "0")
            FILES_CHANGED=$(git ls-files | wc -l || echo "0")
            COMMITS=$(git log --pretty=format:"%H|%s|%b" 2>/dev/null || echo "")
          fi
          
          # Build release notes
          NOTES="# SQL CLI v${VERSION}

**Release Date:** $(date +'%B %d, %Y')
"
          
          # Add custom notes if provided
          CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -n "$CUSTOM_NOTES" ]; then
            NOTES="$NOTES
## üì¢ Release Notes

$CUSTOM_NOTES
"
          fi
          
          # Add statistics
          NOTES="$NOTES
## üìä Release Overview
- **Commits in this release:** $COMMIT_COUNT
- **Files updated:** $FILES_CHANGED

## ‚ú® Highlights
"
          
          # Check for specific feature categories
          if echo "$COMMITS" | grep -qi "input.*sync\|scroll.*indicator\|character.*count"; then
            NOTES="$NOTES
### üéØ Input Improvements
- Fixed input synchronization bug that existed since project start
- Added character count and cursor position display
- Visual scroll indicators when text extends beyond view
"
          fi
          
          if echo "$COMMITS" | grep -qi "datatable\|dataprovider\|data.*migration"; then
            NOTES="$NOTES
### üìä DataTable Architecture
- Advanced migration to DataProvider trait pattern
- Abstracted TUI from direct data access
- Foundation for multiple data source support
"
          fi
          
          if echo "$COMMITS" | grep -qi "word.*nav\|ctrl.*left\|ctrl.*right"; then
            NOTES="$NOTES
### ‚å®Ô∏è Navigation Enhancements
- Added Ctrl+Left/Right for word navigation
- Cross-platform compatibility improvements
"
          fi
          
          # Traditional categorized changes
          NOTES="$NOTES
## üìù Changes by Category
"
          
          # Features
          if [ -n "$LAST_TAG" ]; then
            FEATURES=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" 2>/dev/null | grep -E "^feat(\(.*\))?:" | sed 's/^feat[^:]*: //' | grep -v "bump version" || true)
            if [ -n "$FEATURES" ]; then
              NOTES="$NOTES
### üöÄ New Features"
              while IFS= read -r line; do
                [ -n "$line" ] && NOTES="$NOTES
- $line"
              done <<< "$FEATURES"
              NOTES="$NOTES
"
            fi
            
            # Bug Fixes
            FIXES=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" 2>/dev/null | grep -E "^fix(\(.*\))?:" | sed 's/^fix[^:]*: //' | grep -v "bump version" || true)
            if [ -n "$FIXES" ]; then
              NOTES="$NOTES
### üêõ Bug Fixes"
              while IFS= read -r line; do
                [ -n "$line" ] && NOTES="$NOTES
- $line"
              done <<< "$FIXES"
              NOTES="$NOTES
"
            fi
            
            # Refactoring
            REFACTORS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" 2>/dev/null | grep -E "^refactor(\(.*\))?:" | sed 's/^refactor[^:]*: //' | grep -v "bump version" || true)
            if [ -n "$REFACTORS" ]; then
              NOTES="$NOTES
### üîß Refactoring"
              while IFS= read -r line; do
                [ -n "$line" ] && NOTES="$NOTES
- $line"
              done <<< "$REFACTORS"
              NOTES="$NOTES
"
            fi
          fi
          
          # Add commit details
          NOTES="$NOTES
<details>
<summary>üìã View all commits</summary>

"
          if [ -n "$LAST_TAG" ]; then
            COMMIT_LIST=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%an)" 2>/dev/null | grep -v "bump version" || true)
          else
            COMMIT_LIST=$(git log --pretty=format:"- %s (%an)" 2>/dev/null | head -20 || true)
          fi
          NOTES="$NOTES$COMMIT_LIST

</details>

## üéØ Key Features

- **Instant Data Preview**: CSV/JSON files load immediately
- **Visual Feedback**: Key press indicator, cell highlighting  
- **Advanced Navigation**: Vim-style keys, viewport/cursor lock
- **Powerful Search**: Regular search (Ctrl+F), fuzzy filter (Ctrl+/)
- **Data Export**: Save as CSV or JSON
- **Debug Mode**: Press F5 for comprehensive state information

## üì¶ Installation

Download the binary for your platform from the assets below.

---
**Thank you for using SQL CLI!** üéâ

Report issues: [GitHub Issues](https://github.com/TimelordUK/sql-cli/issues)"
          
          # Save to file first for debugging
          echo "$NOTES" > RELEASE_NOTES.md
          
          # Use delimiter for multiline output
          {
            echo "notes<<RELEASE_NOTES_EOF"
            echo "$NOTES"
            echo "RELEASE_NOTES_EOF"
          } >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add sql-cli/Cargo.toml
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

  build:
    name: Build Release Binaries
    needs: prepare-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: sql-cli-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: sql-cli-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: sql-cli-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: sql-cli-macos-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: v${{ needs.prepare-release.outputs.new_version }}
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Build Release
      working-directory: ./sql-cli
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create artifact directory
      run: mkdir -p artifacts
    
    - name: Copy binary (Unix)
      if: matrix.os != 'windows-latest'
      run: cp sql-cli/target/${{ matrix.target }}/release/sql-cli artifacts/${{ matrix.artifact }}
    
    - name: Copy binary (Windows)
      if: matrix.os == 'windows-latest'
      run: cp sql-cli/target/${{ matrix.target }}/release/sql-cli.exe artifacts/${{ matrix.artifact }}.exe
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: artifacts/*
  
  release:
    name: Create GitHub Release
    needs: [prepare-release, build]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: v${{ needs.prepare-release.outputs.new_version }}
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.prepare-release.outputs.new_version }}
        name: v${{ needs.prepare-release.outputs.new_version }}
        body: ${{ needs.prepare-release.outputs.release_notes }}
        files: artifacts/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}